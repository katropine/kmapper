{"name":"Kmapper","tagline":"KMapper - PHP MySql Query Builder","body":"### Welcome to KMapper - PHP MySql Access Layer and Query Builder.\r\n\r\nKMapper - MySql Database access layer\r\n================================\r\n\r\nKMapper library is a PHP toolkit for accessing and manipulating MySql database. It provides a query builder class called TableMapper. KMapper is a PDO wrapper library.\r\nData is returned as associative array. \r\n\r\n\r\nInstructions\r\n================================\r\nFirst create a `kmapper.php` file in your `/app/config` or `/application/config` or `/config` directory with content.\r\n* For non MVC framework use define `kmapper.php` config path with `define('KMAPPER_CONFIG_LOCATION', '/my/cistom/path')`\r\n\r\n```php\r\nreturn array(\r\n    // default mandatory\r\n    'default' => array(\r\n        'host' => 'localhost',\r\n        'dbname' => 'kdbtest',\r\n        'user' => 'root',\r\n        'password' => 'superpass',\r\n        'prefix' => '',\r\n        'pdoattributes' => array(\r\n            array(\\PDO::ATTR_DEFAULT_FETCH_MODE, \\PDO::FETCH_ASSOC),\r\n            array(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION),\r\n            array(\\PDO::ATTR_EMULATE_PREPARES, false)\r\n        )\r\n    ),\r\n    'db1' => array(\r\n       'host' => 'localhost',\r\n        'dbname' => 'otherdatabase',\r\n        'user' => 'root',\r\n        'password' => 'superpass',\r\n        'prefix' => 'test',\r\n        'pdoattributes' => array(\r\n            array(\\PDO::ATTR_DEFAULT_FETCH_MODE, \\PDO::FETCH_ASSOC),\r\n            array(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION),\r\n            array(\\PDO::ATTR_EMULATE_PREPARES, false)\r\n        )\r\n\r\n    )\r\n);\r\n``` \r\n\r\nExecute first query:\r\n--------------------\r\n\r\n```php\r\n$DataObject = \\KMapper\\MySql::query(\"SELECT * FROM t1\");\r\n$DataObject = \\KMapper\\MySql::execute(\r\n    \"SELECT * FROM `#__t1` WHERE id = ? AND age = ?\", \r\n    array(\r\n        array(12,\\PDO::PARAM_INT), \r\n        array(25, \\PDO::PARAM_INT)\r\n    )\r\n);\r\n$DataObject = \\KMapper\\MySql::execute(\r\n    \"SELECT * FROM `#__t1` WHERE id = :id AND age = :age\", \r\n    array(\r\n        array(':id' => 12,\\PDO::PARAM_INT), \r\n        array(':age' => 25, \\PDO::PARAM_INT)\r\n    )\r\n);\r\n```\r\nTable Prefix:\r\n```\r\n#__ is a placeholder, it will be replaced with the value from 'prefix' in config.\r\n```\r\n\r\nMultiple database connections\r\n-----------------------------\r\n\r\n```php\r\n$options['connection'] = new  KMapper\\MySqlDbConnect('db1');\r\n\r\n$DataObject = \\KMapper\\MySql::query(\"SELECT * FROM #__t1\", $options);\r\n$DataObject = \\KMapper\\MySql::execute(\"SELECT * FROM #__t1 WHERE id = ?\", array(12), $options);\r\n```\r\n\r\nQuery Builder\r\n-------------\r\n```php\r\n\r\n$UserMP = new \\KMapper\\TabelMapper(\"#__user\", 'usr');\r\n\r\n$UsersDataObject = $UserMP->setSelect(array(\"usr.first_name\", \"usr.last_name\", \"addr.zip\"))\r\n                    // table1, joinField1, onTable2, onField2, table1Alias\r\n                    ->setInnerJoin(\"#__address\", \"id_user\", \"usr\", \"id\", \"addr\")\r\n                    ->setWhere(\"usr.status != ? AND usr.smart = ? AND (addr.zip = ? OR addr.zip = ?)\", array('banned', false, '23000', '21000'))\r\n                    ->setOrderBy(\"usr.name ASC\")\r\n                    ->fetchAll();\r\n\r\nvar_dump($UsersDataObject->toArray());\r\nvar_dump($UsersDataObject->toJson());\r\n```\r\n\r\nInsert & Update\r\n--------------\r\n\r\n```php\r\n$UserMP = new \\KMapper\\TabelMapper(\"#__user\");\r\n\r\n$data = array(\r\n    'first_name' => \"Fu\",\r\n    'last_name'  => \"Bar\" \r\n);\r\n// INSERT, no id provided\r\n$UserMP->save($data);\r\n\r\n\r\n$data = array(\r\n    'id' => 22,\r\n    'first_name' => \"Fu\",\r\n    'last_name'  => \"Bar\" \r\n);\r\n// UPDATE where id = 22\r\n$UserMP->save($data);\r\n```\r\nIn case \"id\" is not the primary key name, key has to be defined:\r\n```php\r\n$UserMP = new \\KMapper\\TabelMapper(\"#__user\");\r\n$UserMP->setPrimaryKeyName('my_unstandard_id')->save($data);\r\n```\r\n\r\nMutiple UPDATE & INSERT\r\n---------------------\r\n```php\r\n$UserMP = new \\KMapper\\TabelMapper(\"#__user\");\r\n\r\n$data = array\r\n    array('first_name' => 'Kriss', 'last_name' => 'Kristiansen'),\r\n    array('first_name' => 'Johnny', 'last_name' => 'Johnosn')\r\n\r\n);\r\n\r\n$UserMP->batchSave($data);\r\n```\r\n\r\nWHERE id IN ()\r\n-----------------------\r\n\r\n```php\r\n\r\n$roles = array(1,2,5,8);\r\n// set placeholders\r\n$inPlaceholders =\\KMapper\\MySql::getPlaceholders($roles);\r\n\r\n$i = KMapper\\TableMapper::getInstance()\r\n    ->setFrom('#__user')\r\n    ->setWhere(\"`user_id` = ? AND `group_id` IN ( {$inPlaceholders} )\", array_merge(array($user->getId()),$roles))\r\n    ->countAll();\r\n\r\n```\r\n\r\nTransactions\r\n------------\r\n```php\r\ntry{\r\n    \\KMapper\\MySql::transactionBegin());\r\n\r\n    $last = \\KMapper\\MySql::query($sqlTask)->getLastID();\r\n\r\n    if(!$last){\r\n        throw new \\Exception(\"Could not insert\");\r\n    }\r\n\r\n    if(!\\KMapper\\MySql::query($sqlHierarchy)->isSuccess()){\r\n        throw new \\Exception(\"Query error\");\r\n    }\r\n\r\n    \\KMapper\\MySql::transactionCommit());\r\n    \r\n}  catch (PDOException $E){\r\n    \\KMapper\\MySql::transactionRollback();\r\n}  catch (Exception $E){\r\n    \\KMapper\\MySql::transactionRollback();\r\n}\r\n```\r\n\r\nInstall KMapper with Composer\r\n-----------------------------\r\n\r\n```\r\n\"require\": {\r\n    \"katropine/kmapper\" : \"dev-master\"\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}